{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91ff0c22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_rdh_ipdo\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_x</th>\n",
       "      <th>data</th>\n",
       "      <th>dia_x</th>\n",
       "      <th>mes_x</th>\n",
       "      <th>ano_x</th>\n",
       "      <th>enaseabs_x</th>\n",
       "      <th>enasepp_x</th>\n",
       "      <th>enasuabs_x</th>\n",
       "      <th>enasupp_x</th>\n",
       "      <th>enaneabs_x</th>\n",
       "      <th>...</th>\n",
       "      <th>solar</th>\n",
       "      <th>carga</th>\n",
       "      <th>intercambio_N</th>\n",
       "      <th>intercambio_NE</th>\n",
       "      <th>intercambio_SE</th>\n",
       "      <th>intercambio_SUL</th>\n",
       "      <th>demanda_max_dia</th>\n",
       "      <th>demanda_max</th>\n",
       "      <th>demanda_max_data</th>\n",
       "      <th>i_internacional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>01/01/2020</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2020</td>\n",
       "      <td>35746</td>\n",
       "      <td>54</td>\n",
       "      <td>2624</td>\n",
       "      <td>35</td>\n",
       "      <td>5595</td>\n",
       "      <td>...</td>\n",
       "      <td>435.0</td>\n",
       "      <td>56436.0</td>\n",
       "      <td>2811.0</td>\n",
       "      <td>2939.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>-5097.0</td>\n",
       "      <td>66315.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>02/01/2020</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2020</td>\n",
       "      <td>35850</td>\n",
       "      <td>54</td>\n",
       "      <td>2603</td>\n",
       "      <td>34</td>\n",
       "      <td>5485</td>\n",
       "      <td>...</td>\n",
       "      <td>324.0</td>\n",
       "      <td>64373.0</td>\n",
       "      <td>3157.0</td>\n",
       "      <td>3406.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>-4334.0</td>\n",
       "      <td>71208.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>03/01/2020</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2020</td>\n",
       "      <td>36554</td>\n",
       "      <td>55</td>\n",
       "      <td>2582</td>\n",
       "      <td>34</td>\n",
       "      <td>5398</td>\n",
       "      <td>...</td>\n",
       "      <td>387.0</td>\n",
       "      <td>64448.0</td>\n",
       "      <td>3170.0</td>\n",
       "      <td>3324.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>-4896.0</td>\n",
       "      <td>70618.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>04/01/2020</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2020</td>\n",
       "      <td>37055</td>\n",
       "      <td>56</td>\n",
       "      <td>2635</td>\n",
       "      <td>35</td>\n",
       "      <td>5363</td>\n",
       "      <td>...</td>\n",
       "      <td>310.0</td>\n",
       "      <td>60752.0</td>\n",
       "      <td>2502.0</td>\n",
       "      <td>3287.0</td>\n",
       "      <td>785.0</td>\n",
       "      <td>-4521.0</td>\n",
       "      <td>70379.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>05/01/2020</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2020</td>\n",
       "      <td>37755</td>\n",
       "      <td>57</td>\n",
       "      <td>2715</td>\n",
       "      <td>36</td>\n",
       "      <td>5324</td>\n",
       "      <td>...</td>\n",
       "      <td>329.0</td>\n",
       "      <td>56763.0</td>\n",
       "      <td>2575.0</td>\n",
       "      <td>2778.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>-4774.0</td>\n",
       "      <td>67497.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>164.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>1458</td>\n",
       "      <td>29/12/2023</td>\n",
       "      <td>29</td>\n",
       "      <td>12</td>\n",
       "      <td>2023</td>\n",
       "      <td>27815</td>\n",
       "      <td>58</td>\n",
       "      <td>16090</td>\n",
       "      <td>217</td>\n",
       "      <td>1713</td>\n",
       "      <td>...</td>\n",
       "      <td>8625.0</td>\n",
       "      <td>80768.0</td>\n",
       "      <td>-1464.0</td>\n",
       "      <td>-2573.0</td>\n",
       "      <td>-1109.0</td>\n",
       "      <td>3148.0</td>\n",
       "      <td>87018.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>1459</td>\n",
       "      <td>30/12/2023</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>2023</td>\n",
       "      <td>27666</td>\n",
       "      <td>58</td>\n",
       "      <td>15790</td>\n",
       "      <td>213</td>\n",
       "      <td>1731</td>\n",
       "      <td>...</td>\n",
       "      <td>8417.0</td>\n",
       "      <td>74767.0</td>\n",
       "      <td>-1182.0</td>\n",
       "      <td>951.0</td>\n",
       "      <td>2133.0</td>\n",
       "      <td>3673.0</td>\n",
       "      <td>81886.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1460</th>\n",
       "      <td>1460</td>\n",
       "      <td>31/12/2023</td>\n",
       "      <td>31</td>\n",
       "      <td>12</td>\n",
       "      <td>2023</td>\n",
       "      <td>27732</td>\n",
       "      <td>58</td>\n",
       "      <td>15504</td>\n",
       "      <td>209</td>\n",
       "      <td>1749</td>\n",
       "      <td>...</td>\n",
       "      <td>6768.0</td>\n",
       "      <td>67696.0</td>\n",
       "      <td>-933.0</td>\n",
       "      <td>3098.0</td>\n",
       "      <td>4031.0</td>\n",
       "      <td>3072.0</td>\n",
       "      <td>80953.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>1461</td>\n",
       "      <td>01/01/2024</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2024</td>\n",
       "      <td>25936</td>\n",
       "      <td>39</td>\n",
       "      <td>6086</td>\n",
       "      <td>81</td>\n",
       "      <td>2286</td>\n",
       "      <td>...</td>\n",
       "      <td>6250.0</td>\n",
       "      <td>63657.0</td>\n",
       "      <td>-795.0</td>\n",
       "      <td>3923.0</td>\n",
       "      <td>4718.0</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>74861.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>1462</td>\n",
       "      <td>02/01/2024</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2024</td>\n",
       "      <td>27397</td>\n",
       "      <td>42</td>\n",
       "      <td>6166</td>\n",
       "      <td>82</td>\n",
       "      <td>3072</td>\n",
       "      <td>...</td>\n",
       "      <td>6618.0</td>\n",
       "      <td>74036.0</td>\n",
       "      <td>-953.0</td>\n",
       "      <td>3679.0</td>\n",
       "      <td>4632.0</td>\n",
       "      <td>4428.0</td>\n",
       "      <td>83289.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>163.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1463 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0_x        data  dia_x  mes_x  ano_x  enaseabs_x  enasepp_x  \\\n",
       "0                0  01/01/2020      1      1   2020       35746         54   \n",
       "1                1  02/01/2020      2      1   2020       35850         54   \n",
       "2                2  03/01/2020      3      1   2020       36554         55   \n",
       "3                3  04/01/2020      4      1   2020       37055         56   \n",
       "4                4  05/01/2020      5      1   2020       37755         57   \n",
       "...            ...         ...    ...    ...    ...         ...        ...   \n",
       "1458          1458  29/12/2023     29     12   2023       27815         58   \n",
       "1459          1459  30/12/2023     30     12   2023       27666         58   \n",
       "1460          1460  31/12/2023     31     12   2023       27732         58   \n",
       "1461          1461  01/01/2024      1      1   2024       25936         39   \n",
       "1462          1462  02/01/2024      2      1   2024       27397         42   \n",
       "\n",
       "      enasuabs_x  enasupp_x  enaneabs_x  ...   solar    carga  intercambio_N  \\\n",
       "0           2624         35        5595  ...   435.0  56436.0         2811.0   \n",
       "1           2603         34        5485  ...   324.0  64373.0         3157.0   \n",
       "2           2582         34        5398  ...   387.0  64448.0         3170.0   \n",
       "3           2635         35        5363  ...   310.0  60752.0         2502.0   \n",
       "4           2715         36        5324  ...   329.0  56763.0         2575.0   \n",
       "...          ...        ...         ...  ...     ...      ...            ...   \n",
       "1458       16090        217        1713  ...  8625.0  80768.0        -1464.0   \n",
       "1459       15790        213        1731  ...  8417.0  74767.0        -1182.0   \n",
       "1460       15504        209        1749  ...  6768.0  67696.0         -933.0   \n",
       "1461        6086         81        2286  ...  6250.0  63657.0         -795.0   \n",
       "1462        6166         82        3072  ...  6618.0  74036.0         -953.0   \n",
       "\n",
       "      intercambio_NE  intercambio_SE  intercambio_SUL  demanda_max_dia  \\\n",
       "0             2939.0           128.0          -5097.0          66315.0   \n",
       "1             3406.0           249.0          -4334.0          71208.0   \n",
       "2             3324.0           154.0          -4896.0          70618.0   \n",
       "3             3287.0           785.0          -4521.0          70379.0   \n",
       "4             2778.0           203.0          -4774.0          67497.0   \n",
       "...              ...             ...              ...              ...   \n",
       "1458         -2573.0         -1109.0           3148.0          87018.0   \n",
       "1459           951.0          2133.0           3673.0          81886.0   \n",
       "1460          3098.0          4031.0           3072.0          80953.0   \n",
       "1461          3923.0          4718.0           3250.0          74861.0   \n",
       "1462          3679.0          4632.0           4428.0          83289.0   \n",
       "\n",
       "         demanda_max  demanda_max_data  i_internacional  \n",
       "0              90525        30/01/2019             23.0  \n",
       "1              90525        30/01/2019             53.0  \n",
       "2              90525        30/01/2019             62.0  \n",
       "3              90525        30/01/2019            165.0  \n",
       "4              90525        30/01/2019            164.0  \n",
       "...              ...               ...              ...  \n",
       "1458       101475  e        14/11/2023              0.0  \n",
       "1459       101475  e        14/11/2023              0.0  \n",
       "1460       101475  e        14/11/2023              0.0  \n",
       "1461       101475  e        14/11/2023              0.0  \n",
       "1462       101475  e        14/11/2023            163.0  \n",
       "\n",
       "[1463 rows x 62 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            data  PLD_SECO  PLD_SUL  PLD_NE   PLD_N\n",
      "0     01/01/2020    283.16   283.16  300.61  283.16\n",
      "1     02/01/2020    293.01   293.01  293.41  293.01\n",
      "2     03/01/2020    293.06   293.06  293.06  293.06\n",
      "3     04/01/2020    359.77   359.77  361.48  359.77\n",
      "4     05/01/2020    349.39   349.39  365.65  349.39\n",
      "...          ...       ...      ...     ...     ...\n",
      "1460  31/12/2023     69.04    69.04   69.04   69.04\n",
      "1461  01/01/2024     61.07    61.07   61.07   61.07\n",
      "1462  02/01/2024     61.07    61.07   61.07   61.07\n",
      "1463  03/01/2024     61.07    61.07   61.07   61.07\n",
      "1464  04/01/2024     61.07    61.07   61.07   61.07\n",
      "\n",
      "[1465 rows x 5 columns]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>data</th>\n",
       "      <th>PLD_SECO</th>\n",
       "      <th>PLD_SUL</th>\n",
       "      <th>PLD_NE</th>\n",
       "      <th>PLD_N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/01/2020</td>\n",
       "      <td>283.16</td>\n",
       "      <td>283.16</td>\n",
       "      <td>300.61</td>\n",
       "      <td>283.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02/01/2020</td>\n",
       "      <td>293.01</td>\n",
       "      <td>293.01</td>\n",
       "      <td>293.41</td>\n",
       "      <td>293.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03/01/2020</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04/01/2020</td>\n",
       "      <td>359.77</td>\n",
       "      <td>359.77</td>\n",
       "      <td>361.48</td>\n",
       "      <td>359.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05/01/2020</td>\n",
       "      <td>349.39</td>\n",
       "      <td>349.39</td>\n",
       "      <td>365.65</td>\n",
       "      <td>349.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1460</th>\n",
       "      <td>31/12/2023</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>01/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>02/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1463</th>\n",
       "      <td>03/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1464</th>\n",
       "      <td>04/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1465 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            data  PLD_SECO  PLD_SUL  PLD_NE   PLD_N\n",
       "0     01/01/2020    283.16   283.16  300.61  283.16\n",
       "1     02/01/2020    293.01   293.01  293.41  293.01\n",
       "2     03/01/2020    293.06   293.06  293.06  293.06\n",
       "3     04/01/2020    359.77   359.77  361.48  359.77\n",
       "4     05/01/2020    349.39   349.39  365.65  349.39\n",
       "...          ...       ...      ...     ...     ...\n",
       "1460  31/12/2023     69.04    69.04   69.04   69.04\n",
       "1461  01/01/2024     61.07    61.07   61.07   61.07\n",
       "1462  02/01/2024     61.07    61.07   61.07   61.07\n",
       "1463  03/01/2024     61.07    61.07   61.07   61.07\n",
       "1464  04/01/2024     61.07    61.07   61.07   61.07\n",
       "\n",
       "[1465 rows x 5 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>data</th>\n",
       "      <th>PLD_SECO</th>\n",
       "      <th>PLD_SUL</th>\n",
       "      <th>PLD_NE</th>\n",
       "      <th>PLD_N</th>\n",
       "      <th>Unnamed: 0_x</th>\n",
       "      <th>dia_x</th>\n",
       "      <th>mes_x</th>\n",
       "      <th>ano_x</th>\n",
       "      <th>enaseabs_x</th>\n",
       "      <th>...</th>\n",
       "      <th>solar</th>\n",
       "      <th>carga</th>\n",
       "      <th>intercambio_N</th>\n",
       "      <th>intercambio_NE</th>\n",
       "      <th>intercambio_SE</th>\n",
       "      <th>intercambio_SUL</th>\n",
       "      <th>demanda_max_dia</th>\n",
       "      <th>demanda_max</th>\n",
       "      <th>demanda_max_data</th>\n",
       "      <th>i_internacional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/01/2020</td>\n",
       "      <td>283.16</td>\n",
       "      <td>283.16</td>\n",
       "      <td>300.61</td>\n",
       "      <td>283.16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>35746.0</td>\n",
       "      <td>...</td>\n",
       "      <td>435.0</td>\n",
       "      <td>56436.0</td>\n",
       "      <td>2811.0</td>\n",
       "      <td>2939.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>-5097.0</td>\n",
       "      <td>66315.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02/01/2020</td>\n",
       "      <td>293.01</td>\n",
       "      <td>293.01</td>\n",
       "      <td>293.41</td>\n",
       "      <td>293.01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>35850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>324.0</td>\n",
       "      <td>64373.0</td>\n",
       "      <td>3157.0</td>\n",
       "      <td>3406.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>-4334.0</td>\n",
       "      <td>71208.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03/01/2020</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "      <td>293.06</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>36554.0</td>\n",
       "      <td>...</td>\n",
       "      <td>387.0</td>\n",
       "      <td>64448.0</td>\n",
       "      <td>3170.0</td>\n",
       "      <td>3324.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>-4896.0</td>\n",
       "      <td>70618.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04/01/2020</td>\n",
       "      <td>359.77</td>\n",
       "      <td>359.77</td>\n",
       "      <td>361.48</td>\n",
       "      <td>359.77</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>37055.0</td>\n",
       "      <td>...</td>\n",
       "      <td>310.0</td>\n",
       "      <td>60752.0</td>\n",
       "      <td>2502.0</td>\n",
       "      <td>3287.0</td>\n",
       "      <td>785.0</td>\n",
       "      <td>-4521.0</td>\n",
       "      <td>70379.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05/01/2020</td>\n",
       "      <td>349.39</td>\n",
       "      <td>349.39</td>\n",
       "      <td>365.65</td>\n",
       "      <td>349.39</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>37755.0</td>\n",
       "      <td>...</td>\n",
       "      <td>329.0</td>\n",
       "      <td>56763.0</td>\n",
       "      <td>2575.0</td>\n",
       "      <td>2778.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>-4774.0</td>\n",
       "      <td>67497.0</td>\n",
       "      <td>90525</td>\n",
       "      <td>30/01/2019</td>\n",
       "      <td>164.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1460</th>\n",
       "      <td>31/12/2023</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "      <td>69.04</td>\n",
       "      <td>1460.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2023.0</td>\n",
       "      <td>27732.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6768.0</td>\n",
       "      <td>67696.0</td>\n",
       "      <td>-933.0</td>\n",
       "      <td>3098.0</td>\n",
       "      <td>4031.0</td>\n",
       "      <td>3072.0</td>\n",
       "      <td>80953.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>01/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>1461.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>25936.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6250.0</td>\n",
       "      <td>63657.0</td>\n",
       "      <td>-795.0</td>\n",
       "      <td>3923.0</td>\n",
       "      <td>4718.0</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>74861.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>02/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>1462.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>27397.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6618.0</td>\n",
       "      <td>74036.0</td>\n",
       "      <td>-953.0</td>\n",
       "      <td>3679.0</td>\n",
       "      <td>4632.0</td>\n",
       "      <td>4428.0</td>\n",
       "      <td>83289.0</td>\n",
       "      <td>101475  e</td>\n",
       "      <td>14/11/2023</td>\n",
       "      <td>163.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1463</th>\n",
       "      <td>03/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1464</th>\n",
       "      <td>04/01/2024</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>61.07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1465 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            data  PLD_SECO  PLD_SUL  PLD_NE   PLD_N  Unnamed: 0_x  dia_x  \\\n",
       "0     01/01/2020    283.16   283.16  300.61  283.16           0.0    1.0   \n",
       "1     02/01/2020    293.01   293.01  293.41  293.01           1.0    2.0   \n",
       "2     03/01/2020    293.06   293.06  293.06  293.06           2.0    3.0   \n",
       "3     04/01/2020    359.77   359.77  361.48  359.77           3.0    4.0   \n",
       "4     05/01/2020    349.39   349.39  365.65  349.39           4.0    5.0   \n",
       "...          ...       ...      ...     ...     ...           ...    ...   \n",
       "1460  31/12/2023     69.04    69.04   69.04   69.04        1460.0   31.0   \n",
       "1461  01/01/2024     61.07    61.07   61.07   61.07        1461.0    1.0   \n",
       "1462  02/01/2024     61.07    61.07   61.07   61.07        1462.0    2.0   \n",
       "1463  03/01/2024     61.07    61.07   61.07   61.07           NaN    NaN   \n",
       "1464  04/01/2024     61.07    61.07   61.07   61.07           NaN    NaN   \n",
       "\n",
       "      mes_x   ano_x  enaseabs_x  ...   solar    carga  intercambio_N  \\\n",
       "0       1.0  2020.0     35746.0  ...   435.0  56436.0         2811.0   \n",
       "1       1.0  2020.0     35850.0  ...   324.0  64373.0         3157.0   \n",
       "2       1.0  2020.0     36554.0  ...   387.0  64448.0         3170.0   \n",
       "3       1.0  2020.0     37055.0  ...   310.0  60752.0         2502.0   \n",
       "4       1.0  2020.0     37755.0  ...   329.0  56763.0         2575.0   \n",
       "...     ...     ...         ...  ...     ...      ...            ...   \n",
       "1460   12.0  2023.0     27732.0  ...  6768.0  67696.0         -933.0   \n",
       "1461    1.0  2024.0     25936.0  ...  6250.0  63657.0         -795.0   \n",
       "1462    1.0  2024.0     27397.0  ...  6618.0  74036.0         -953.0   \n",
       "1463    NaN     NaN         NaN  ...     NaN      NaN            NaN   \n",
       "1464    NaN     NaN         NaN  ...     NaN      NaN            NaN   \n",
       "\n",
       "      intercambio_NE  intercambio_SE  intercambio_SUL  demanda_max_dia  \\\n",
       "0             2939.0           128.0          -5097.0          66315.0   \n",
       "1             3406.0           249.0          -4334.0          71208.0   \n",
       "2             3324.0           154.0          -4896.0          70618.0   \n",
       "3             3287.0           785.0          -4521.0          70379.0   \n",
       "4             2778.0           203.0          -4774.0          67497.0   \n",
       "...              ...             ...              ...              ...   \n",
       "1460          3098.0          4031.0           3072.0          80953.0   \n",
       "1461          3923.0          4718.0           3250.0          74861.0   \n",
       "1462          3679.0          4632.0           4428.0          83289.0   \n",
       "1463             NaN             NaN              NaN              NaN   \n",
       "1464             NaN             NaN              NaN              NaN   \n",
       "\n",
       "         demanda_max  demanda_max_data  i_internacional  \n",
       "0              90525        30/01/2019             23.0  \n",
       "1              90525        30/01/2019             53.0  \n",
       "2              90525        30/01/2019             62.0  \n",
       "3              90525        30/01/2019            165.0  \n",
       "4              90525        30/01/2019            164.0  \n",
       "...              ...               ...              ...  \n",
       "1460       101475  e        14/11/2023              0.0  \n",
       "1461       101475  e        14/11/2023              0.0  \n",
       "1462       101475  e        14/11/2023            163.0  \n",
       "1463             NaN               NaN              NaN  \n",
       "1464             NaN               NaN              NaN  \n",
       "\n",
       "[1465 rows x 66 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1465 entries, 0 to 1464\n",
      "Data columns (total 66 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   data              1465 non-null   object \n",
      " 1   PLD_SECO          1465 non-null   float64\n",
      " 2   PLD_SUL           1465 non-null   float64\n",
      " 3   PLD_NE            1465 non-null   float64\n",
      " 4   PLD_N             1465 non-null   float64\n",
      " 5   Unnamed: 0_x      1463 non-null   float64\n",
      " 6   dia_x             1463 non-null   float64\n",
      " 7   mes_x             1463 non-null   float64\n",
      " 8   ano_x             1463 non-null   float64\n",
      " 9   enaseabs_x        1463 non-null   float64\n",
      " 10  enasepp_x         1463 non-null   float64\n",
      " 11  enasuabs_x        1463 non-null   float64\n",
      " 12  enasupp_x         1463 non-null   float64\n",
      " 13  enaneabs_x        1463 non-null   float64\n",
      " 14  enanepp_x         1463 non-null   float64\n",
      " 15  enanabs_x         1463 non-null   float64\n",
      " 16  enanpp_x          1463 non-null   float64\n",
      " 17  enasinabs_x       1463 non-null   float64\n",
      " 18  enasinpp_x        1463 non-null   float64\n",
      " 19  enasemlt_x        1463 non-null   float64\n",
      " 20  enasunmlt_x       1463 non-null   float64\n",
      " 21  enanenmlt_x       1463 non-null   float64\n",
      " 22  enannmlt_x        1463 non-null   float64\n",
      " 23  enasinmlt_x       1463 non-null   float64\n",
      " 24  earse             1463 non-null   float64\n",
      " 25  earsu             1463 non-null   float64\n",
      " 26  earne             1463 non-null   float64\n",
      " 27  earn              1463 non-null   float64\n",
      " 28  earsin            1463 non-null   float64\n",
      " 29  tx_var_ear_sin    1462 non-null   float64\n",
      " 30  Unnamed: 0_y      1463 non-null   float64\n",
      " 31  dia_y             1463 non-null   float64\n",
      " 32  mes_y             1463 non-null   float64\n",
      " 33  ano_y             1463 non-null   float64\n",
      " 34  enaseabs_y        1463 non-null   float64\n",
      " 35  enasepp_y         1463 non-null   float64\n",
      " 36  enasuabs_y        1463 non-null   float64\n",
      " 37  enasupp_y         1463 non-null   float64\n",
      " 38  enaneabs_y        1463 non-null   float64\n",
      " 39  enanepp_y         1463 non-null   float64\n",
      " 40  enanabs_y         1463 non-null   float64\n",
      " 41  enanpp_y          1463 non-null   float64\n",
      " 42  enasinabs_y       1463 non-null   float64\n",
      " 43  enasinpp_y        1463 non-null   float64\n",
      " 44  enasemlt_y        1463 non-null   float64\n",
      " 45  enasunmlt_y       1463 non-null   float64\n",
      " 46  enanenmlt_y       1463 non-null   float64\n",
      " 47  enannmlt_y        1463 non-null   float64\n",
      " 48  enasinmlt_y       1463 non-null   float64\n",
      " 49  hidro_nacional    1463 non-null   float64\n",
      " 50  itaipu            1463 non-null   float64\n",
      " 51  hidro_total       1463 non-null   float64\n",
      " 52  ute_convencional  1463 non-null   float64\n",
      " 53  ute_nuclear       1463 non-null   float64\n",
      " 54  ute_total         1463 non-null   float64\n",
      " 55  eolica            1463 non-null   float64\n",
      " 56  solar             1463 non-null   float64\n",
      " 57  carga             1463 non-null   float64\n",
      " 58  intercambio_N     1463 non-null   float64\n",
      " 59  intercambio_NE    1463 non-null   float64\n",
      " 60  intercambio_SE    1463 non-null   float64\n",
      " 61  intercambio_SUL   1463 non-null   float64\n",
      " 62  demanda_max_dia   1463 non-null   float64\n",
      " 63  demanda_max       1463 non-null   object \n",
      " 64  demanda_max_data  1463 non-null   object \n",
      " 65  i_internacional   1463 non-null   float64\n",
      "dtypes: float64(63), object(3)\n",
      "memory usage: 755.5+ KB\n",
      "Running on http://127.0.0.1:8053/\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8053/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x18ed3b9a310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from dash import Dash, html, dcc\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as px \n",
    "import pandas as pd\n",
    "from plotly.subplots import make_subplots\n",
    "import plotly.graph_objs as go\n",
    "import numpy as np\n",
    "\n",
    "app = dash.Dash(__name__) # criando o seu aplicativo Dash\n",
    "server = app.server\n",
    "\n",
    "\n",
    "teste_df = pd.read_excel(r'C:\\Users\\Bernardo\\Downloads\\teste.xlsx')\n",
    "teste_df_ipdo = pd.read_excel(r'C:\\Users\\Bernardo\\Downloads\\testeipdo.xlsx')\n",
    "df_ultima_update_pld_bd0 = pd.read_excel(r'C:\\Users\\Bernardo\\Downloads\\testepld.xlsx')\n",
    "\n",
    "df_rdh_ipdo = pd.merge(teste_df, teste_df_ipdo, how = 'left', on = 'data')\n",
    "df_rdh_ipdo.to_excel(r'C:\\\\Users\\\\Bernardo\\\\Downloads\\\\teste_rdh_ipdo.xlsx')\n",
    "df_rdh_ipdo = df_rdh_ipdo.fillna(method='ffill')\n",
    "print('df_rdh_ipdo')\n",
    "display(df_rdh_ipdo)\n",
    "df_ultima_update_pld_bd0 = df_ultima_update_pld_bd0.round(2)\n",
    "df_final = pd.merge(df_ultima_update_pld_bd0, df_rdh_ipdo, how = 'left', on = 'data')\n",
    "print(df_ultima_update_pld_bd0)\n",
    "display(df_ultima_update_pld_bd0)\n",
    "df_final.to_excel(r'C:\\\\Users\\\\Bernardo\\\\Downloads\\\\df_final.xlsx')\n",
    "display(df_final)\n",
    "df_final.describe()\n",
    "df_final.info()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['enasinabs_x'], name=\"Afluência Brasil (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['enasinmlt_x'], name=\"Afluência mlt Brasil (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['carga'], name=\"Carga Brasil (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['solar'], name=\"Solar (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['eolica'], name=\"Eólica (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['hidro_total'], name=\"Hidro Total (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['ute_total'], name=\"UTE Total (MWm)\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['PLD_SECO'], name=\"PLD (R$/MWh)\"),\n",
    "    secondary_y=True,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['demanda_max_dia'], name=\"demanda_max_dia\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['demanda_max'], name=\"demanda_max_histórica\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['earsin']*2930, name=\"earsin\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['intercambio_SE'], name=\"intercambio_SE\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['intercambio_SUL'], name=\"intercambio_SUL\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['intercambio_NE'], name=\"intercambio_NE\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['intercambio_N'], name=\"intercambio_N\"),\n",
    "    secondary_y=False,)\n",
    "\n",
    "\n",
    "#Add figure title\n",
    "fig.update_layout(title_text=\"PLD (R$/MWh), Geração e Afluência (MWm)\", template='plotly')\n",
    "#Set x-axis title\n",
    "#fig.update_xaxes(title_text=\"xaxis title\")\n",
    "#Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Energia</b> (MWm)\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>PLD</b> (R$/MMh)\", secondary_y=True)\n",
    "#fig.show()#(fig, filename=\"C:\\\\Users\\\\Bernardo\\\\Downloads\\\\ena_carga_pld.html\")\n",
    "#py.offline.plot(fig, filename=\"C:\\\\Users\\\\Bernardo\\\\Downloads\\\\ena_carga_pld.html\")\n",
    "\n",
    "\n",
    "#Gráfico Balaço de energia\n",
    "#Gráfico Balaço de energia\n",
    "#Gráfico Balaço de energia\n",
    "#Gráfico Balaço de energia\n",
    "\n",
    "\n",
    "import plotly.graph_objects as px \n",
    "  \n",
    "fig2 = px.Figure() \n",
    "\n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'intercâmbio_internacional', \n",
    "    line=dict(color='gray'),\n",
    "    x = df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['i_internacional'], \n",
    "    stackgroup='one',\n",
    "   )) \n",
    "\n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'solar', \n",
    "    line=dict(color='yellow'),\n",
    "    x =  df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['solar'], \n",
    "    stackgroup='one'\n",
    "   )) \n",
    "  \n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'eolica', \n",
    "    line=dict(color='green'),\n",
    "    x = df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['eolica'], \n",
    "    stackgroup='one'\n",
    "   )) \n",
    "\n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'ute_total',\n",
    "    line=dict(color='red'),\n",
    "    x = df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['ute_total'], \n",
    "    stackgroup='one'\n",
    "   ))\n",
    "\n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'hidro_total',\n",
    "    line=dict(color='blue'),\n",
    "    x = df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['hidro_total'], \n",
    "    stackgroup='one',\n",
    "   )) \n",
    "\n",
    "#layout=go.Layout(\n",
    "#        title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\n",
    "\n",
    "fig2.add_trace(go.Scatter( \n",
    "    name = 'carga', \n",
    "    line=dict(color='purple'),\n",
    "    x = df_rdh_ipdo['data'], \n",
    "    y = df_rdh_ipdo['carga'], \n",
    "    mode = 'lines',\n",
    "   )) \n",
    "\n",
    "fig2.update_yaxes(title_text=\"Energia (MWm)\")\n",
    "fig2.update_layout(title_text=\"Balanço de energia (MWm)\")\n",
    "\n",
    "\n",
    "#Gráfico reservatórios\n",
    "#Gráfico reservatórios\n",
    "#Gráfico reservatórios\n",
    "#Gráfico reservatórios\n",
    "\n",
    "\n",
    "condicoes = [(df_final['mes_x'] == 1), \n",
    "             (df_final['mes_x'] == 2), \n",
    "             (df_final['mes_x'] == 3),\n",
    "             (df_final['mes_x'] == 4),\n",
    "             (df_final['mes_x'] == 5),\n",
    "             (df_final['mes_x'] == 6),\n",
    "             (df_final['mes_x'] == 7),\n",
    "             (df_final['mes_x'] == 8),\n",
    "             (df_final['mes_x'] == 9),\n",
    "             (df_final['mes_x'] == 10),\n",
    "             (df_final['mes_x'] == 11),\n",
    "             (df_final['mes_x'] == 12),]\n",
    "\n",
    "opcoes = ['JAN','FEV','MAR','ABR','MAI','JUN','JUL','AGO','SET','OUT','NOV','DEZ']\n",
    "\n",
    "df_final['mes_extenso'] = np.select(condicoes, opcoes)\n",
    "\n",
    "# Gráfico usando apenas marcadores\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2020)]\n",
    "trace1 = go.Scatter(x=df_filtro_ano['mes_extenso'],\n",
    "                    y=df_filtro_ano['earsin'],\n",
    "                    mode = 'markers+lines',\n",
    "                    name = 'earsin_2020',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2021)]\n",
    "trace2 = go.Scatter(x=df_filtro_ano['mes_extenso'],\n",
    "                    y=df_filtro_ano['earsin'],\n",
    "                    mode = 'markers+lines',\n",
    "                    name = 'earsin_2021',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2022)]\n",
    "trace3 = go.Scatter(x=df_filtro_ano['mes_extenso'],\n",
    "                    y=df_filtro_ano['earsin'],\n",
    "                    mode = 'markers+lines',\n",
    "                    name = 'earsin_2022',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2023)]\n",
    "trace4 = go.Scatter(x=df_filtro_ano['mes_extenso'],\n",
    "                    y=df_filtro_ano['earsin'],\n",
    "                    mode = 'markers+lines',\n",
    "                    name = 'earsin_2023',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2024)]\n",
    "trace5 = go.Scatter(x=df_filtro_ano['mes_extenso'],\n",
    "                    y=df_filtro_ano['earsin'],\n",
    "                    mode = 'markers+lines',\n",
    "                    name = 'earsin_2024',);\n",
    "\n",
    "data = [trace1, trace2, trace3, trace4, trace5]\n",
    "\n",
    "#layout = go.layout(title:'% do Armazenamento máximo dos reservatórios (MWm) %EARmáx', yaxis={'%EARmáx'})\n",
    "\n",
    "fig3 = go.Figure(data=data, layout=go.Layout(title=go.layout.Title(text=\"% do Armazenamento máximo dos reservatórios (MWm) %EARmáx\")))\n",
    "\n",
    "fig3.update_yaxes(title = \"% EARmáx\")\n",
    "\n",
    "#df_final = df_final.astype({\"dia_x\": int, \"mes_x\": int})\n",
    "df_final = df_final.astype({\"dia_x\": str, \"mes_x\": str})\n",
    "df_final['mes_dia'] = df_final['dia_x'] + '/' + df_final['mes_extenso']\n",
    "\n",
    "df_final['tx_var_ear_sin_rolling'] = df_final['tx_var_ear_sin'].rolling(7, min_periods=1).mean()\n",
    "\n",
    "#taxa de variação diária\n",
    "\n",
    "# Gráfico usando apenas marcadores\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2020)]\n",
    "trace1 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'earsin_2020',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2020)]\n",
    "trace11 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin_rolling'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'MM_7d_earsin_2020',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2021)]\n",
    "trace2 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'earsin_2021',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2021)]\n",
    "trace22 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin_rolling'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'MM_7d_earsin_2021',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2022)]\n",
    "trace3 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'earsin_2022',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2022)]\n",
    "trace33 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin_rolling'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'MM_7d_earsin_2022',);\n",
    "\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2023)]\n",
    "trace4 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'earsin_2023',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2023)]\n",
    "trace44 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin_rolling'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'MM_7d_earsin_2023',);\n",
    "\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2024)]\n",
    "trace5 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'earsin_2024',);\n",
    "\n",
    "df_filtro_ano = df_final[(df_final['ano_x'] == 2024)]\n",
    "trace55 = go.Scatter(x=df_filtro_ano['mes_dia'],\n",
    "                    y=df_filtro_ano['tx_var_ear_sin_rolling'],\n",
    "                    mode = 'lines',\n",
    "                    name = 'MM_7d_earsin_2024',);\n",
    "\n",
    "\n",
    "data = [trace1, trace2, trace3, trace4, trace5, trace11, trace22, trace33, trace44, trace55]\n",
    "\n",
    "#layout = go.layout(title:'% do Armazenamento máximo dos reservatórios (MWm) %EARmáx', yaxis={'%EARmáx'})\n",
    "\n",
    "fig7 = go.Figure(data=data, layout=go.Layout(title=go.layout.Title(text=\"taxa de variação da EAR diária (%)\")))\n",
    "\n",
    "fig7.update_yaxes(title = \"% EAR\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Gráfico com as ENAs dos submrecados\n",
    "#Gráfico com as ENAs dos submrecados\n",
    "#Gráfico com as ENAs dos submrecados\n",
    "#Gráfico com as ENAs dos submrecados\n",
    "\n",
    "fig4 = make_subplots(rows=2, cols=2, subplot_titles=(\"ENA SUDESTE/CENTRO-OESTE\", \"ENA SUL\", \"ENA NORDESTE\", \"ENA NORTE\"), start_cell=\"bottom-left\")\n",
    "\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enaseabs_x']),\n",
    "              row=1, col=1)\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enasemlt_x']),\n",
    "              row=1, col=1)\n",
    "\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enasuabs_x']),\n",
    "              row=1, col=2)\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enasunmlt_x']),\n",
    "              row=1, col=2)\n",
    "\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enaneabs_x']),\n",
    "              row=2, col=1)\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enanenmlt_x']),\n",
    "              row=2, col=1)\n",
    "\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enanabs_x']),\n",
    "              row=2, col=2)\n",
    "fig4.add_trace(go.Scatter(x=df_final['data'], y=df_final['enannmlt_x']),\n",
    "              row=2, col=2)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Update yaxis properties\n",
    "fig4.update_yaxes(title_text=\"ENA (MWm)\", row=1, col=1)\n",
    "fig4.update_yaxes(title_text=\"ENA (MWm)\", row=1, col=2)\n",
    "fig4.update_yaxes(title_text=\"ENA (MWm)\", row=2, col=1)\n",
    "fig4.update_yaxes(title_text=\"ENA (MWm)\", row=2, col=2)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "fig4.update_layout(height=700, width=1100, title_text=\"Energia Natural Afluênte dos Submercados (ENAs)\", showlegend=False)\n",
    "\n",
    "\n",
    "\n",
    "###Tabela com as ENAS por submercado\n",
    "###Tabela com as ENAS por submercado\n",
    "###Tabela com as ENAS por submercado\n",
    "\n",
    "\n",
    "\n",
    "fig5 = go.Figure(data=[go.Table(header=dict(values=['Data', 'ENA SE/CO', 'ENA SUL', 'ENA NORDESTE', 'ENA NORTE', 'ENA SIN']),\n",
    "                 cells=dict(values=[teste_df['data'], teste_df['enasepp'], teste_df['enasupp'], teste_df['enanepp'], teste_df['enanpp'], teste_df['enasinpp']]))\n",
    "                     ])\n",
    "\n",
    "fig5.update_layout(title_text=\"ENAs (%MLT)\", template='plotly')\n",
    "\n",
    "\n",
    "\n",
    "fig6 = go.Figure(data=[go.Table(header=dict(values=['Data', 'EAR SE/CO', 'EAR SUL', 'EAR NORDESTE', 'EAR NORTE', 'EAR SIN']),\n",
    "                 cells=dict(values=[teste_df['data'], teste_df['earse'], teste_df['earsu'], teste_df['earne'], teste_df['earn'], teste_df['earsin']]))\n",
    "                     ])\n",
    "\n",
    "fig6.update_layout(title_text=\"ENERGIA ARMAZENADA - EAR (%EARmáx)\", template='plotly')\n",
    "\n",
    "\n",
    "#fig2 = px.scatter(df, x=\"Quantidade\", y=\"Valor Final\", color=\"Produto\", size=\"Valor Unitário\", size_max=60)\n",
    "\n",
    "\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "#Gráfico com todas as premissas\n",
    "\n",
    "fig8 = make_subplots(specs=[[{\"secondary_y\": False}]])\n",
    "\n",
    "fig8.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['PLD_SECO'], name=\"PLD_SECO\"),)\n",
    "\n",
    "fig8.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['PLD_SUL'], name=\"PLD_SUL\"),)\n",
    "\n",
    "fig8.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['PLD_NE'], name=\"PLD_NE\"),)\n",
    "\n",
    "fig8.add_trace(\n",
    "    go.Scatter(x=df_final['data'], y=df_final['PLD_N'], name=\"PLD_NORTE\"),)\n",
    "\n",
    "#Add figure title\n",
    "fig8.update_layout(title_text=\"PLDs SUBMERCADO (R$/MWh)\", template='plotly')\n",
    "#Set x-axis title\n",
    "#fig.update_xaxes(title_text=\"xaxis title\")\n",
    "#Set y-axes titles\n",
    "fig8.update_yaxes(title_text=\"<b>PLD</b> (R$/MWh)\")\n",
    "#fig.show()#(fig, filename=\"C:\\\\Users\\\\Bernardo\\\\Downloads\\\\ena_carga_pld.html\")\n",
    "#py.offline.plot(fig, filename=\"C:\\\\Users\\\\Bernardo\\\\Downloads\\\\ena_carga_pld.html\")\n",
    "\n",
    "\n",
    "###Tabela com as ENAS por submercado\n",
    "###Tabela com as ENAS por submercado\n",
    "###Tabela com as ENAS por submercado\n",
    "\n",
    "\n",
    "\n",
    "fig9 = go.Figure(data=[go.Table(header=dict(values=['Data', 'PLD_SECO', 'PLD_SUL', 'PLD_NE', 'PLD_NORTE']),\n",
    "                 cells=dict(values=[df_final['data'], df_final['PLD_SECO'], df_final['PLD_SUL'], df_final['PLD_NE'], df_final['PLD_N']]))\n",
    "                     ])\n",
    "\n",
    "fig9.update_layout(title_text=\"PLDs SUBMERCADO (R$/MWh)\", template='plotly')\n",
    "\n",
    "# css\n",
    "app.layout = html.Div(children=[\n",
    "    \n",
    "    html.Img(src='assets/vale3.png', alt='image', width = '650'),\n",
    "    \n",
    "    #html.H1(children='RDH - IPDO - PLD', style={\"text-align\": \"center\"}),\n",
    "\n",
    "    #html.h2(children='''\n",
    "    #    Dashboard de Vendas em Python\n",
    "    #'''),\n",
    "    \n",
    "    #html.H3(children=\"Vendas de cada Produto por Loja\"),\n",
    "    \n",
    "   \n",
    "    dcc.Graph(id='grafico2', figure=fig2),\n",
    "    dcc.Graph(id='grafico3', figure=fig3),\n",
    "    dcc.Graph(id='vendas_por_loja1',figure=fig6),\n",
    "    dcc.Graph(id='vendas_por_loja2',figure=fig7),\n",
    "    dcc.Graph(id='vendas_por_loja3',figure=fig),\n",
    "    dcc.Graph(id='vendas_por_loja4',figure=fig4),\n",
    "    dcc.Graph(id='vendas_por_loja5',figure=fig5),\n",
    "    dcc.Graph(id='vendas_por_loja6',figure=fig8),\n",
    "    dcc.Graph(id='vendas_por_loja7',figure=fig9),\n",
    "    \n",
    "    \n",
    "])\n",
    "\n",
    "# callbacks\n",
    "# Adicione a rota raiz para o Dash\n",
    "app.config.suppress_callback_exceptions = True\n",
    "\n",
    "# Imprime o link para acesso\n",
    "print(\"Running on http://127.0.0.1:8053/\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, use_reloader=False, port=8053)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
